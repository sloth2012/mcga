// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// MaxDouble
double MaxDouble();
RcppExport SEXP mcgaqt_MaxDouble() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(MaxDouble());
    return rcpp_result_gen;
END_RCPP
}
// SizeOfDouble
int SizeOfDouble();
RcppExport SEXP mcgaqt_SizeOfDouble() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(SizeOfDouble());
    return rcpp_result_gen;
END_RCPP
}
// SizeOfInt
int SizeOfInt();
RcppExport SEXP mcgaqt_SizeOfInt() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(SizeOfInt());
    return rcpp_result_gen;
END_RCPP
}
// SizeOfLong
int SizeOfLong();
RcppExport SEXP mcgaqt_SizeOfLong() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(SizeOfLong());
    return rcpp_result_gen;
END_RCPP
}
// DoubleToBytes
IntegerVector DoubleToBytes(double x);
RcppExport SEXP mcgaqt_DoubleToBytes(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(DoubleToBytes(x));
    return rcpp_result_gen;
END_RCPP
}
// DoubleVectorToBytes
IntegerVector DoubleVectorToBytes(DoubleVector d);
RcppExport SEXP mcgaqt_DoubleVectorToBytes(SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DoubleVector >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(DoubleVectorToBytes(d));
    return rcpp_result_gen;
END_RCPP
}
// BytesToDouble
double BytesToDouble(IntegerVector x);
RcppExport SEXP mcgaqt_BytesToDouble(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(BytesToDouble(x));
    return rcpp_result_gen;
END_RCPP
}
// ByteVectorToDoubles
DoubleVector ByteVectorToDoubles(IntegerVector b);
RcppExport SEXP mcgaqt_ByteVectorToDoubles(SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(ByteVectorToDoubles(b));
    return rcpp_result_gen;
END_RCPP
}
// OnePointCrossOver
List OnePointCrossOver(IntegerVector bytes1, IntegerVector bytes2, unsigned int cutpoint);
RcppExport SEXP mcgaqt_OnePointCrossOver(SEXP bytes1SEXP, SEXP bytes2SEXP, SEXP cutpointSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type bytes1(bytes1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type bytes2(bytes2SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type cutpoint(cutpointSEXP);
    rcpp_result_gen = Rcpp::wrap(OnePointCrossOver(bytes1, bytes2, cutpoint));
    return rcpp_result_gen;
END_RCPP
}
// OnePointCrossOverOnDoublesUsingBytes
List OnePointCrossOverOnDoublesUsingBytes(DoubleVector d1, DoubleVector d2, unsigned int cutpoint);
RcppExport SEXP mcgaqt_OnePointCrossOverOnDoublesUsingBytes(SEXP d1SEXP, SEXP d2SEXP, SEXP cutpointSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DoubleVector >::type d1(d1SEXP);
    Rcpp::traits::input_parameter< DoubleVector >::type d2(d2SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type cutpoint(cutpointSEXP);
    rcpp_result_gen = Rcpp::wrap(OnePointCrossOverOnDoublesUsingBytes(d1, d2, cutpoint));
    return rcpp_result_gen;
END_RCPP
}
// TwoPointCrossOver
List TwoPointCrossOver(IntegerVector bytes1, IntegerVector bytes2, unsigned int cutpoint1, unsigned int cutpoint2);
RcppExport SEXP mcgaqt_TwoPointCrossOver(SEXP bytes1SEXP, SEXP bytes2SEXP, SEXP cutpoint1SEXP, SEXP cutpoint2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type bytes1(bytes1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type bytes2(bytes2SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type cutpoint1(cutpoint1SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type cutpoint2(cutpoint2SEXP);
    rcpp_result_gen = Rcpp::wrap(TwoPointCrossOver(bytes1, bytes2, cutpoint1, cutpoint2));
    return rcpp_result_gen;
END_RCPP
}
// TwoPointCrossOverOnDoublesUsingBytes
List TwoPointCrossOverOnDoublesUsingBytes(DoubleVector d1, DoubleVector d2, unsigned int cutpoint1, unsigned int cutpoint2);
RcppExport SEXP mcgaqt_TwoPointCrossOverOnDoublesUsingBytes(SEXP d1SEXP, SEXP d2SEXP, SEXP cutpoint1SEXP, SEXP cutpoint2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DoubleVector >::type d1(d1SEXP);
    Rcpp::traits::input_parameter< DoubleVector >::type d2(d2SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type cutpoint1(cutpoint1SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type cutpoint2(cutpoint2SEXP);
    rcpp_result_gen = Rcpp::wrap(TwoPointCrossOverOnDoublesUsingBytes(d1, d2, cutpoint1, cutpoint2));
    return rcpp_result_gen;
END_RCPP
}
// UniformCrossOver
List UniformCrossOver(IntegerVector bytes1, IntegerVector bytes2);
RcppExport SEXP mcgaqt_UniformCrossOver(SEXP bytes1SEXP, SEXP bytes2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type bytes1(bytes1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type bytes2(bytes2SEXP);
    rcpp_result_gen = Rcpp::wrap(UniformCrossOver(bytes1, bytes2));
    return rcpp_result_gen;
END_RCPP
}
// UniformCrossOverOnDoublesUsingBytes
List UniformCrossOverOnDoublesUsingBytes(DoubleVector d1, DoubleVector d2);
RcppExport SEXP mcgaqt_UniformCrossOverOnDoublesUsingBytes(SEXP d1SEXP, SEXP d2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DoubleVector >::type d1(d1SEXP);
    Rcpp::traits::input_parameter< DoubleVector >::type d2(d2SEXP);
    rcpp_result_gen = Rcpp::wrap(UniformCrossOverOnDoublesUsingBytes(d1, d2));
    return rcpp_result_gen;
END_RCPP
}
// ByteCodeMutation
IntegerVector ByteCodeMutation(IntegerVector bytes1, const double pmutation);
RcppExport SEXP mcgaqt_ByteCodeMutation(SEXP bytes1SEXP, SEXP pmutationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type bytes1(bytes1SEXP);
    Rcpp::traits::input_parameter< const double >::type pmutation(pmutationSEXP);
    rcpp_result_gen = Rcpp::wrap(ByteCodeMutation(bytes1, pmutation));
    return rcpp_result_gen;
END_RCPP
}
// ByteCodeMutationUsingDoubles
DoubleVector ByteCodeMutationUsingDoubles(DoubleVector d, const double pmutation);
RcppExport SEXP mcgaqt_ByteCodeMutationUsingDoubles(SEXP dSEXP, SEXP pmutationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DoubleVector >::type d(dSEXP);
    Rcpp::traits::input_parameter< const double >::type pmutation(pmutationSEXP);
    rcpp_result_gen = Rcpp::wrap(ByteCodeMutationUsingDoubles(d, pmutation));
    return rcpp_result_gen;
END_RCPP
}
// ByteCodeMutationUsingDoublesRandom
DoubleVector ByteCodeMutationUsingDoublesRandom(DoubleVector d, const double pmutation);
RcppExport SEXP mcgaqt_ByteCodeMutationUsingDoublesRandom(SEXP dSEXP, SEXP pmutationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DoubleVector >::type d(dSEXP);
    Rcpp::traits::input_parameter< const double >::type pmutation(pmutationSEXP);
    rcpp_result_gen = Rcpp::wrap(ByteCodeMutationUsingDoublesRandom(d, pmutation));
    return rcpp_result_gen;
END_RCPP
}
// EnsureBounds
void EnsureBounds(DoubleVector doubles, DoubleVector mins, DoubleVector maxs);
RcppExport SEXP mcgaqt_EnsureBounds(SEXP doublesSEXP, SEXP minsSEXP, SEXP maxsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DoubleVector >::type doubles(doublesSEXP);
    Rcpp::traits::input_parameter< DoubleVector >::type mins(minsSEXP);
    Rcpp::traits::input_parameter< DoubleVector >::type maxs(maxsSEXP);
    EnsureBounds(doubles, mins, maxs);
    return R_NilValue;
END_RCPP
}
